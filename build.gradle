plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    //Devops code start
    id 'pl.allegro.tech.build.axion-release' version '1.12.0'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
    id 'com.palantir.docker-compose' version '0.22.1'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    //Devops code end
}

group = 'com.syzegee'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.syzegee.ruleengine.service.RuleEngineServiceApplication'
    }
}

repositories {
    mavenCentral()
    //devops code start
    jcenter()
    //devops code End
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile group: 'com.graphql-java', name: 'graphql-java-tools', version: '3.2.0'
    compile group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '3.6.0'
    compile group: 'com.graphql-java', name: 'graphql-java', version: '3.0.0'
    testImplementation 'org.apache.httpcomponents:httpclient'
    //Devops code starts here
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    //Devops code ends here
}
test {
    ignoreFailures = true
}

// Devops code start//
String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'cmidhun'
String imageName = "${dockerHubUsernameProperty}/rule-engine-service:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}

tasks['sonarqube'].dependsOn test

// Devops code end//